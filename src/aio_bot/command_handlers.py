from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram import F, types
from pydantic import BaseModel
import logging
from src.api_client import JsonPlaceholderClient

class UserResponse(BaseModel):
    user_id: int
    full_name: str
    contact_email: str


async def cmd_start(message: Message, local_run: bool):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")
    text = "üëã –Ø —ç—Ö–æ–±–æ—Ç –Ω–∞ –≤–µ–±—Ö—É–∫–∞—Ö!"
    if local_run:
        text = "üëã –Ø —ç—Ö–æ–±–æ—Ç –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ (–õ–æ–Ω–≥ –ü–æ–ª–∏–Ω–≥)!"
    await message.answer(text)


async def get_users(
        message: types.Message,
        api_client: JsonPlaceholderClient
):
    try:
        users = await api_client.get_users()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞—à—É —Å—Ö–µ–º—É –æ—Ç–≤–µ—Ç–∞
        response_data = [
            UserResponse(
                user_id=user.id,
                full_name=user.name,
                contact_email=user.email
            ) for user in users
        ]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = "\n".join(
            f"üë§ {user.full_name} (ID: {user.user_id})\n"
            f"üìß {user.contact_email}\n"
            for user in response_data[:5]  # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        )

        await message.answer(response_text)

    except Exception as e:
        logging.error(f"API error: {e}")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

async def echo_text(message: Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    await message.answer(f"üîÅ –í—ã —Å–∫–∞–∑–∞–ª–∏: <i>{message.text}</i>", parse_mode=ParseMode.HTML)


def register_handlers(dp: Dispatcher):
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(echo_text, F.text)