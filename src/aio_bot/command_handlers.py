from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram import F, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from pydantic import BaseModel
import logging


from src.api_client import JsonPlaceholderClient, GoogleSheetsExporter
from src.repositories.user_repository import UserRepository


class UserResponse(BaseModel):
    user_id: int
    full_name: str
    contact_email: str


async def cmd_start(message: Message, local_run: bool):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")
    text = "üëã –Ø —ç—Ö–æ–±–æ—Ç –Ω–∞ –≤–µ–±—Ö—É–∫–∞—Ö!"
    if local_run:
        text = "üëã –Ø —ç—Ö–æ–±–æ—Ç –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ (–õ–æ–Ω–≥ –ü–æ–ª–∏–Ω–≥)!"

    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î",
            callback_data="get_users"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            callback_data="delete_users"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="üìä –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Google Sheets",
            callback_data="save_to_gsheets"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="‚ÑπÔ∏è –û –±–æ—Ç–µ",
            callback_data="about"
        )
    )

    await message.answer(
        text,
        reply_markup=builder.as_markup(),
                         )

async def handle_callbacks(
        callback: types.CallbackQuery,
        api_client: JsonPlaceholderClient,
        api_google: GoogleSheetsExporter,
        user_repo: UserRepository
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    if callback.data == "get_users":
        try:
            users = await api_client.get_users()

            result = await user_repo.save_users(users)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = "\n".join(f"{u.name} - {u.email}" for u in users[:5])  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã—Ö 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            await callback.message.edit_text(
                f"–°o—Ö—Ä–∞–Ω–µ–Ω–Ω–æ {result} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. \n "
                f"–ü–µ—Ä–≤—ã–µ 5 –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{response}",
                reply_markup=callback.message.reply_markup)

        except Exception as e:
            await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {str(e)}")
    elif callback.data == "save_to_gsheets":
        text = ("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Google Sheets \n"
                "https://docs.google.com/spreadsheets/d/1DvXeVBw0TLg8Gm8ZZEheSKoIOTLbJyXDTQd6wsyvx0s/edit?usp=sharing")
        try:
            await callback.answer("‚è≥ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets...")
            users = await user_repo.get_all_users()
            is_ok_google = await api_google.export_users(users, "1DvXeVBw0TLg8Gm8ZZEheSKoIOTLbJyXDTQd6wsyvx0s")
            if not is_ok_google:
                text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Google Sheets"
            await callback.message.edit_text(
                text,
                reply_markup=callback.message.reply_markup
            )
        except Exception as e:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ")
            logging.error(f"Google Sheets error: {e}")
    elif callback.data == "delete_users":
        await callback.message.edit_text(
            "—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –±—ã–ª–∞ –ø—Ä–æ–ø–∏—Å–∞–Ω–∞ –≤ –∑–∞–¥–∞–Ω–∏–∏\n"
            "–¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: \n"
            "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ü–∏—Å–∞—Ä–µ–≤ –ù–∏–∫–æ–ª–∞–π  @Nikolay_Pisarev\n",
            reply_markup=callback.message.reply_markup
        )
    elif callback.data == "about":
        await callback.message.edit_text(
            "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API\n"
            "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç JSON Placeholder\n"
            "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ü–∏—Å–∞—Ä–µ–≤ –ù–∏–∫–æ–ª–∞–π  @Nikolay_Pisarev\n"
            "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ https://github.com/Pisarev82/test_task.git",
            reply_markup=callback.message.reply_markup
        )
    await callback.answer()


async def get_users(
        message: types.Message,
        api_client: JsonPlaceholderClient,
        user_repo: UserRepository
):
    try:
        users = await api_client.get_users()

        result = await user_repo.save_users(users)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = "\n".join(f"{u.name} - {u.email}" for u in users[:5]) # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã—Ö 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        await message.answer(f"–°o—Ö—Ä–∞–Ω–µ–Ω–Ω–æ {result} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. \n –ü–µ—Ä–≤—ã–µ 5 –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{response}")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

async def echo_text(message: Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    await message.answer(f"üîÅ –í—ã —Å–∫–∞–∑–∞–ª–∏: <i>{message.text}</i>", parse_mode=ParseMode.HTML)


def register_handlers(dp: Dispatcher):
    dp.message.register(cmd_start, Command("start"))
    dp.callback_query.register(handle_callbacks, F.data.in_(
        ["get_users", "delete_users", "save_to_gsheets", "about"]
        ))
    dp.message.register(get_users, Command("users"))
    dp.message.register(echo_text, F.text)