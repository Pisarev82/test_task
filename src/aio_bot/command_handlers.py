from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram import F, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from pydantic import BaseModel
import logging


from src.api_client import JsonPlaceholderClient
from src.repositories.user_base_repository import UserRepository


class UserResponse(BaseModel):
    user_id: int
    full_name: str
    contact_email: str


async def cmd_start(message: Message, local_run: bool):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")
    text = "üëã –Ø —ç—Ö–æ–±–æ—Ç –Ω–∞ –≤–µ–±—Ö—É–∫–∞—Ö!"
    if local_run:
        text = "üëã –Ø —ç—Ö–æ–±–æ—Ç –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ (–õ–æ–Ω–≥ –ü–æ–ª–∏–Ω–≥)!"

    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üìã –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            callback_data="get_users"
        ),
        types.InlineKeyboardButton(
            text="‚ÑπÔ∏è –û –±–æ—Ç–µ",
            callback_data="about"
        )
    )

    await message.answer(
        text,
        reply_markup=builder.as_markup(),
                         )

async def handle_callbacks(callback: types.CallbackQuery, api_client: JsonPlaceholderClient):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    if callback.data == "get_users":
        users = await api_client.get_users()
        response = "\n".join(f"{user.name} - {user.email}" for user in users[:3])
        await callback.message.edit_text(
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{response}",
            reply_markup=callback.message.reply_markup
        )
    elif callback.data == "about":
        await callback.message.edit_text(
            "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API\n"
            "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç JSON Placeholder",
            reply_markup=callback.message.reply_markup
        )
    await callback.answer()


async def get_users(
        message: types.Message,
        api_client: JsonPlaceholderClient,
        user_repo: UserRepository
):
    try:
        users = await api_client.get_users()

        result = await user_repo.save_users(users)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = "\n".join(f"{u.name} - {u.email}" for u in users[:5]) # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã—Ö 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        await message.answer(f"–°o—Ö—Ä–∞–Ω–µ–Ω–Ω–æ {result} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. \n –ü–µ—Ä–≤—ã–µ 5 –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{response}")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

async def echo_text(message: Message):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    await message.answer(f"üîÅ –í—ã —Å–∫–∞–∑–∞–ª–∏: <i>{message.text}</i>", parse_mode=ParseMode.HTML)


def register_handlers(dp: Dispatcher):
    dp.message.register(cmd_start, Command("start"))
    dp.callback_query.register(handle_callbacks, F.data.in_(["get_users", "about"]))
    dp.message.register(get_users, Command("users"))
    dp.message.register(echo_text, F.text)